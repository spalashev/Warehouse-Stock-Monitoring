using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.Entity;

namespace EStore
{
    using static EntityFrameworkTransactionsControl;

    public partial class CategoriesControl : UserControl
    {
        //EStore.MainModel dbContext = new EStore.MainModel();
        //BindingList<Categories> bindingListCategories = new BindingList<Categories>();
        EStore.MainModel dbContext = new EStore.MainModel();
        public CategoriesControl()
        {
            InitializeComponent();
            //// Call the Load method to get the data for the given DbSet from the database.
            ////dbContext.Categories.Load();
            //// This line of code is generated by Data Source Configuration Wizard

            //bindingListCategories.AllowNew = true;
            //bindingListCategories.AllowEdit = true;
            //gridControl1.DataSource = bindingListCategories;
            //gridControl1.Refresh();




            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
           // EStore.MainModel dbContext = new EStore.MainModel();
            // Call the Load method to get the data for the given DbSet from the database.
            dbContext.Categories.Load();
            // This line of code is generated by Data Source Configuration Wizard
            gridControl1.DataSource = dbContext.Categories.Local.ToBindingList();
            gridView1.Columns[0].Width = gridView1.Columns[0].Width / 8;
    
            gridView1.Columns[0].OptionsColumn.AllowFocus = false;

            gridControl1.EmbeddedNavigator.ButtonClick += EmbeddedNavigator_ButtonClick;
        }

        private void EmbeddedNavigator_ButtonClick(object sender, DevExpress.XtraEditors.NavigatorButtonClickEventArgs e)
        {
            
        }

        private void button1_Click(object sender, EventArgs e)
        {
            for (int i = 0; i < gridView1.RowCount; i++)
            {
                int j = 0;
                int rowHandle = gridView1.GetRowHandle(i);

                object id = gridView1.GetRowCellValue(rowHandle, gridView1.Columns[j]);
                object category_name = gridView1.GetRowCellValue(rowHandle, gridView1.Columns[j + 1]);

                if (id == null || category_name == null)
                {
                    continue;
                }
               
                Categories cat = new Categories((int)id, category_name.ToString());
                
                if (dbContext.Categories.Any(c => c.category_name == cat.category_name))
                {
                    Categories foundCategory = dbContext.Categories.Where(c => c.id == cat.id).First();
                    if (foundCategory.category_name != category_name.ToString())
                    {
                        foundCategory.category_name = category_name.ToString();
                    }                    
                    continue;
                }
                dbContext.Categories.Add(cat);
                dbContext.SaveChanges();
            }
        }

        private void btnAddCategory_Click(object sender, EventArgs e)
        {
            string categoryName = Microsoft.VisualBasic.Interaction.
                InputBox("Please, enter the name of the new category.", "Add new category");
            if (categoryName == string.Empty)
                return;
            if (categoryName.Length < 3)
            {
                MessageBox.Show("Invalid category name. Category names should be longer than 3 symbols.",
                    "Warning!", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }
           
            Categories cat = dbContext.Categories.FirstOrDefault(c => c.category_name == categoryName);

            if (cat == null)
                dbContext.Categories.Add(new Categories(categoryName));
            else
            {
                MessageBox.Show("The category already exists.", "Error!", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            if (DialogResult.Yes ==
                MessageBox.Show(string.Format("Save category {0}?", categoryName), "Add new category",
                MessageBoxButtons.YesNo, MessageBoxIcon.Question))
            {
                Commit(dbContext);
                dbContext.Categories.Load();
                gridControl1.DataSource = dbContext.Categories.ToList();
            }
            else
                Rollback(dbContext);

        }

        private void btnRemoveCategory_Click(object sender, EventArgs e)
        {
            int[] rowHandles = gridView1.GetSelectedRows();
            string categoryGridValue = gridView1.GetRowCellValue(rowHandles[0], gridView1.Columns[0]).ToString();

            Categories categoryToRemove =
                dbContext.Categories.First(c => c.category_name == categoryGridValue);

            if (categoryToRemove != null)
            {
                if (dbContext.Products.Any(p => p.category_id == categoryToRemove.id))
                {
                    MessageBox.Show(
                        string.Format("The selected category cannot be deleted! There are products which belong to category \"{0}\"!",
                            categoryToRemove.category_name),
                        "Warning!", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }
            }

            dbContext.Categories.Remove(categoryToRemove);

            if (DialogResult.Yes ==
                MessageBox.Show(string.Format("Are you sure that you want to remove category [{0}]", categoryGridValue),
                "Remove category", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
            {
                Commit(dbContext);
                dbContext.Categories.Load();
                gridControl1.DataSource = dbContext.Categories.ToList();
            }
            else
                Rollback(dbContext);
        }

        private void btnEditCategory_Click(object sender, EventArgs e)
        {
            int[] rowHandles = gridView1.GetSelectedRows();
            string categoryGridValue = gridView1.GetRowCellValue(rowHandles[0], gridView1.Columns[0]).ToString();

            string newCategoryName = Microsoft.VisualBasic.Interaction.
                InputBox("Please, enter the new name of the category.", "Edit category");
            if (newCategoryName == string.Empty)
                return;

            if (newCategoryName.Length < 3)
            {
                MessageBox.Show("Invalid category name. Category names should be longer than 3 symbols.",
                     "Warning!", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }
            else if (newCategoryName == categoryGridValue)
            {
                MessageBox.Show("No changes were made.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            else
            {
                Categories modifiedCategory = dbContext.Categories.Where(c => c.category_name == categoryGridValue).FirstOrDefault();
                if (modifiedCategory != null)
                {
                    modifiedCategory.category_name = newCategoryName;                   
                    Commit(dbContext);
                    dbContext.Categories.Load();
                    gridControl1.DataSource = dbContext.Categories.ToList();
                }
            }
        }
    }
}
